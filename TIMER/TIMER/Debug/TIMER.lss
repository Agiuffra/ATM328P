
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006da  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000650  00000000  00000000  00000956  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d4  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000053  00000000  00000000  00001633  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001686  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_11>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  78:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <TIM_init>:
#include <avr/io.h>
#include <avr/interrupt.h>

void TIM_init(uint8_t TIMER)
{
	if (TIMER == 0)
  80:	81 11       	cpse	r24, r1
  82:	1f c0       	rjmp	.+62     	; 0xc2 <TIM_init+0x42>
	{
		PRR		&=~ (1 << PRTIM0);	// Aseguramos que el TIM se encuentre encendido
  84:	e4 e6       	ldi	r30, 0x64	; 100
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	8f 7d       	andi	r24, 0xDF	; 223
  8c:	80 83       	st	Z, r24
		
		TCCR0A	&=~	(1 << COM0A1) || (1 << COM0A0);	// El canal A lo dejamos en output mode normal 
  8e:	84 b5       	in	r24, 0x24	; 36
  90:	81 70       	andi	r24, 0x01	; 1
  92:	84 bd       	out	0x24, r24	; 36
		TCCR0A	&=~ (1 << COM0B1) || (1 << COM0B0);	// El canal B lo dejamos en output mode normal 
  94:	84 b5       	in	r24, 0x24	; 36
  96:	81 70       	andi	r24, 0x01	; 1
  98:	84 bd       	out	0x24, r24	; 36
		TCCR0A	|=	(1 << WGM01) || (0 << WGM00);	// El timer lo usaremos en modo CTC
  9a:	84 b5       	in	r24, 0x24	; 36
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	84 bd       	out	0x24, r24	; 36
		
		TCCR0B	&=~	(1 << FOC0A) || (1 << FOC0B);	// No se forzará ningún canal
  a0:	85 b5       	in	r24, 0x25	; 37
  a2:	81 70       	andi	r24, 0x01	; 1
  a4:	85 bd       	out	0x25, r24	; 37
		TCCR0B	&=~	(1 << WGM02);	// Dejamos en 0 para que el modo siga siendo CTC
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	85 bd       	out	0x25, r24	; 37
		TCCR0B	|=	(1 << CS02) || (0 << CS01) || (1 << CS00); // Preescalador de 1024
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	85 bd       	out	0x25, r24	; 37
		
		TIMSK0	|=	(0 << OCIE0B) || (1 << OCIE0A) || (0 << TOIE0);	// Activamos interrupción por comparación del canal A
  b2:	ee e6       	ldi	r30, 0x6E	; 110
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	80 83       	st	Z, r24
		
		OCR0A = 156;	// Recordar que es de 8 bits (0-255), con preescalador de 1024 a 16 MHz, el timer interrumpe cada 10 ms
  bc:	8c e9       	ldi	r24, 0x9C	; 156
  be:	87 bd       	out	0x27, r24	; 39
  c0:	08 95       	ret
		
	} else if (TIMER == 1)
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	39 f5       	brne	.+78     	; 0x114 <TIM_init+0x94>
	{
		PRR		&=~ (1 << PRTIM1);	// Aseguramos que el TIM se encuentre encendido
  c6:	e4 e6       	ldi	r30, 0x64	; 100
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	80 83       	st	Z, r24
	
		TCCR1A	&=~	(1 << COM1A1) || (1 << COM1A0);	// El canal A lo dejamos en output mode normal
  d0:	e0 e8       	ldi	r30, 0x80	; 128
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	81 70       	andi	r24, 0x01	; 1
  d8:	80 83       	st	Z, r24
		TCCR1A	&=~ (1 << COM1B1) || (1 << COM1B0);	// El canal B lo dejamos en output mode normal
  da:	80 81       	ld	r24, Z
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	80 83       	st	Z, r24
		TCCR1A	&=~	(1 << WGM11) || (1 << WGM10);	// El timer lo usaremos en modo CTC
  e0:	80 81       	ld	r24, Z
  e2:	81 70       	andi	r24, 0x01	; 1
  e4:	80 83       	st	Z, r24
	
		TCCR1B	&=~	(1 << FOC1A) || (1 << FOC1B);	// No se forzará ningún canal
  e6:	e1 e8       	ldi	r30, 0x81	; 129
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	81 70       	andi	r24, 0x01	; 1
  ee:	80 83       	st	Z, r24
		TCCR1B	|=	(0 << WGM13) || (1 << WGM12);	// Dejamos en 0 para que el modo siga siendo CTC
  f0:	80 81       	ld	r24, Z
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	80 83       	st	Z, r24
		TCCR1B	|=	(1 << CS12) || (0 << CS11) || (1 << CS10); // Preescalador de 1024
  f6:	80 81       	ld	r24, Z
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	80 83       	st	Z, r24
	
		TIMSK1	|=	(0 << ICIE1) || (0 << OCIE1B) || (1 << OCIE1A) || (0 << TOIE1);	// Activamos interrupción por comparación del canal A
  fc:	ef e6       	ldi	r30, 0x6F	; 111
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	81 60       	ori	r24, 0x01	; 1
 104:	80 83       	st	Z, r24
	
		OCR1A = 1563;	// Recordar que es de 16 bits (0-65535), con preescalador de 1024 a 16 MHz, el timer interrumpe cada 100 ms
 106:	8b e1       	ldi	r24, 0x1B	; 27
 108:	96 e0       	ldi	r25, 0x06	; 6
 10a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 10e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 112:	08 95       	ret
	} else if (TIMER == 2)
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	11 f5       	brne	.+68     	; 0x15c <TIM_init+0xdc>
	{
		PRR		&=~ (1 << PRTIM2);	// Aseguramos que el TIM se encuentre encendido
 118:	e4 e6       	ldi	r30, 0x64	; 100
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	8f 7b       	andi	r24, 0xBF	; 191
 120:	80 83       	st	Z, r24
	
		TCCR2A	&=~	(1 << COM2A1) || (1 << COM2A0);	// El canal A lo dejamos en output mode normal
 122:	e0 eb       	ldi	r30, 0xB0	; 176
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	81 70       	andi	r24, 0x01	; 1
 12a:	80 83       	st	Z, r24
		TCCR2A	&=~ (1 << COM2B1) || (1 << COM2B0);	// El canal B lo dejamos en output mode normal
 12c:	80 81       	ld	r24, Z
 12e:	81 70       	andi	r24, 0x01	; 1
 130:	80 83       	st	Z, r24
		TCCR2A	|=	(1 << WGM21) || (0 << WGM20);	// El timer lo usaremos en modo CTC
 132:	80 81       	ld	r24, Z
 134:	81 60       	ori	r24, 0x01	; 1
 136:	80 83       	st	Z, r24
	
		TCCR2B	&=~	(1 << FOC2A) || (1 << FOC2B);	// No se forzará ningún canal
 138:	e1 eb       	ldi	r30, 0xB1	; 177
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	81 70       	andi	r24, 0x01	; 1
 140:	80 83       	st	Z, r24
		TCCR2B	&=~	(0 << WGM22);	// Dejamos en 0 para que el modo siga siendo CTC
 142:	80 81       	ld	r24, Z
 144:	80 83       	st	Z, r24
		TCCR2B	|=	(1 << CS22) || (1 << CS21) || (1 << CS20); // Preescalador de 1024
 146:	80 81       	ld	r24, Z
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	80 83       	st	Z, r24
	
		TIMSK2	|=	(0 << OCIE2B) || (1 << OCIE2A) || (0 << TOIE2);	// Activamos interrupción por comparación del canal A
 14c:	e0 e7       	ldi	r30, 0x70	; 112
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	81 60       	ori	r24, 0x01	; 1
 154:	80 83       	st	Z, r24
	
		OCR2A = 156;	// Recordar que es de 8 bits (0-255), con preescalador de 1024 a 16 MHz, el timer interrumpe cada 10 ms
 156:	8c e9       	ldi	r24, 0x9C	; 156
 158:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 15c:	08 95       	ret

0000015e <main>:
	}
}

int main(void)
{
	cli();
 15e:	f8 94       	cli
	
	DDRD = 0xFF;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	8a b9       	out	0x0a, r24	; 10
	
	TIM_init(1);
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 40 00 	call	0x80	; 0x80 <TIM_init>
	
	sei();
 16a:	78 94       	sei
 16c:	ff cf       	rjmp	.-2      	; 0x16c <main+0xe>

0000016e <__vector_11>:
/************************************************************************/
/* FUNCIONES DE INTERRUPCION                                            */
/************************************************************************/
void TIMER1_COMPA_vect()
{
	if (PORTD & (1<<PORTD0)) PORTD &=~ (1 << PORTD0);
 16e:	58 9b       	sbis	0x0b, 0	; 11
 170:	04 c0       	rjmp	.+8      	; 0x17a <__vector_11+0xc>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	8e 7f       	andi	r24, 0xFE	; 254
 176:	8b b9       	out	0x0b, r24	; 11
 178:	08 95       	ret
	else PORTD |= (1 << PORTD0);
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	08 95       	ret

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
